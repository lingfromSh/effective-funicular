{"_id":"note:5Mpm4URrp","title":"短链接生成原理","content":"# 短链接生成原理\n\n## 原理\n\n计算长链接整体为一个十进制数，将其映射成一个62进制数。这个62进制由26个小写字母，26个大写字母和10个数字表示。\n\n假设有long-url这么一个长网址，其10进制数 108+111+110+103+45+117+114+108=816, 其62进制表示就是kna。\n\n为了解决相同值冲突的问题，可以在最后加入自增ID或者先通过摘要函数取得长网址的hash再映射来降低冲突概率。\n\n## 代码实现\n\nDB部分是来实现从短网址到原始网址的步骤，从而实现重定向。\n\n```python\nimport string\nimport pickle\nimport random\nfrom functools import reduce\nfrom operator import add\n\n\nclass DB:\n\n    def __init__(self):\n        self._long2short_db = {}\n        self._short2long_db = {}\n        self.load()\n\n    def add_data(self, s_url, l_url):\n        self._long2short_db[s_url] = l_url\n        self._short2long_db[l_url] = s_url\n\n    def remove_data(self, s_url):\n        self._short2long_db.pop(self._long2short_db.pop(s_url, None), None)\n\n    def get_origin_long_url(self, s_url):\n        return self._long2short_db.get(s_url)\n\n    def get_existed_short_url(self, l_url):\n        return self._short2long_db.get(l_url)\n\n    def save(self):\n        with open(\"short2long.db\", \"wb\") as f:\n            pickle.dump(self._short2long_db, f)\n        with open(\"long2short.db\", \"wb\") as f:\n            pickle.dump(self._long2short_db, f)\n\n    def load(self):\n        try:\n            with open(\"short2long.db\", \"rb\") as f:\n                self._short2long_db = pickle.load(f)\n            with open(\"long2short.db\", \"rb\") as f:\n                self._long2short_db = pickle.load(f)\n        except (pickle.PickleError, FileNotFoundError):\n            self._long2short_db = {}\n            self._short2long_db = {}\n\n\ndef long2short(l_url):\n    if s := db.get_existed_short_url(l_url):\n        return s\n\n    convert_space = tuple(map(str, string.ascii_letters + string.digits))\n    arr = []\n    count = reduce(add, map(ord, l_url))\n    while count >= 0:\n        arr.append(convert_space[count % 62])\n        count //= 62\n\n    # Random instead of a auto increment ID\n    arr.append(convert_space[random.randint(100000, 999999) % 62])\n    s_url = \"\".join(arr)\n    db.add_data(s_url, l_url)\n    return s_url\n\n\ndef short2long(s_url):\n    return db.get_origin_long_url(s_url)\n\n\nif __name__ == \"__main__\":\n    db = DB()\n\n    short_url = long2short(\"http://long-domain/long-level1-path/long-level2-path/?long-query-string=long-query-value\")\n    print(short_url)\n    long_url = short2long(short_url)\n    print(long_url)\n\n    db.save()\n\n```","tags":[],"folderPathname":"/开发","data":{},"createdAt":"2020-12-23T08:00:49.589Z","updatedAt":"2020-12-23T08:11:04.610Z","trashed":false,"_rev":"HGThxpj9x"}