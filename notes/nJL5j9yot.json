{"_id":"note:nJL5j9yot","title":"物体识别 Object Detection","content":"# 物体识别 Object Detection\n\n## 分类器\n\n## Face Detection\n\n```python\nimport cv2\nimport os\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\n'''\n    cv2.CascadeClassifier.detectMultiScale(image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize]]]]]) → objects\n    Parameters:\n          image – Matrix of the type CV_8U containing an image where objects are detected.\n          scaleFactor – Parameter specifying how much the image size is reduced at each image scale.\n          minNeighbors – Parameter specifying how many neighbors each candidate rectangle should have to retain it.\n          flags – Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. It is not used for a new cascade.\n          minSize – Minimum possible object size. Objects smaller than that are ignored.\n          maxSize – Maximum possible object size. Objects larger than that are ignored.\n          objects – Vector of rectangles where each rectangle contains the detected object, the rectangles may be partially outside the original image.\n  '''\n\n# NOTE: 使用文件作为视频输入\ndef detect(video_path):\n    # 使用相对目录路径\n    face_cascade = cv2.CascadeClassifier(os.path.join(BASE_DIR, \"haarcascade_frontalface_default.xml\"))\n    eye_cascade = cv2.CascadeClassifier(os.path.join(BASE_DIR, \"haarcascade_eye.xml\"))\n    \n    camera = cv2.VideoCapture(video_path)\n    while True:\n        ret, frame = camera.read()\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n        for (x, y, w, h) in faces:\n            img = cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)\n\n            roi_gray = gray[y:y + h, x:x + w]\n\n            eyes = eye_cascade.detectMultiScale(roi_gray, 1.03, 5, 0, (80, 80))\n            for (ex, ey, ew, eh) in eyes:\n                cv2.rectangle(img, (x + ex, y + ey), (x + ex + ew, y + ey + eh), (0, 255, 0), 2)\n\n        cv2.imshow(\"camera\", frame)\n        if cv2.waitKey(100) & 0xff == ord(\"q\"):\n            break\n    cv2.destroyAllWindows()\n\n\n```\n\n![result](/home/ling/BoostNote/images/face-detection-frame-1.png)\n\n### <class 'cv2.CascadeClassifier'> returned a result with an error set3 错误\n\n解决方案:\n\n跑去github/gitee下载对应文件就行，网上的数据有误.\n\n1. Gitee下载地址 [gitee](https://gitee.com/mirrors/opencv/tree/master/data/haarcascades)\n\n2. Github下载地址 [github](https://github.com/opencv/opencv/tree/master/data/haarcascades)\n\n\n## Adaboost + CascadeClassifier Face Detection\n\n> github: https://github.com/hjlin0515/face-detection\n\n遵循OOP非常清晰的思路\n\n结果\n\n![result-0](/home/ling/BoostNote/images/bioid-0.png)\n\n![result-1](/home/ling/BoostNote/images/bio-1.png)","tags":[],"folderPathname":"/图像处理","data":{},"createdAt":"2020-12-07T07:22:21.443Z","updatedAt":"2020-12-07T07:41:29.731Z","trashed":false,"_rev":"bFX_yV6SQ"}