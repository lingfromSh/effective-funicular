{"_id":"note:MGYFd_e51","title":"数据库系统","content":"# 数据库系统\n\n## 数据库分类\n文档型 \n\n1. Mongodb\n\n键值型 \n\n1. Redis\n2. Dynamodb\n\n关系型 \n\n1. MySQL\n2. PostgresQL\n\n对象型 \n\n在关系型基础之后建立模式的映射，实现模式和操作相互转换。\n\n## 数据库模式和范式\n\n### 数据库结构与模式\n\n1. 三级抽象\n\n    1. 用户级数据库\n    \n        对应外模式， 用户视图， 用户可以看到的数据库。\n    \n    2. 概念级数据库\n        \n        对应概念模式， 将多个用户视图看作整体。\n        \n    4. 物理级数据库\n\n        对应内模式， 由内部记录组成。\n        \n2. 三级模式\n    \n    1. 外模式\n    2. 概念模式\n    3. 外模式\n\n3. 两级独立性\n    \n    1. 物理独立， 实际存储的数据变换不会影响外部的应用程序\n    2. 逻辑独立， 数据存储的逻辑结构变换不会影响外部的应用程序\n\n    逻辑独立性比物理独立性更难实现\n    \n#### 总结\n\n- 模式是数据库的中心和关键\n- 内模式依赖模式， 独立于内模式和存储设备\n- 外模式面向具体的应用，独立于内模式和存储设备\n- 应用程序依赖于外模式， 独立于模式和内模式\n\n\n### 数据模型\n\n1. (概念数据模型)E-R模型\n\n    用用户观点来描述信息和数据，主要用于数据库设计\n    \n2. (基本数据模型)结构数据模型\n\n    基本数据类型来实现DBMS, 通常由数据结构，数据操作，完整性约束构成\n    \n#### 常用数据模型\n\n1. 层次模型\n2. 网状模型\n3. 关系模型\n4. 面向对象模型\n\n### 关系代数\n\n1. 并\n2. 交\n3. 差\n4. 笛卡尔积\n5. 选择\n6. 投影\n7. 连接\n8. 除法运算\n\n","tags":[],"folderPathname":"/架构师","data":{},"createdAt":"2020-12-22T03:39:23.283Z","updatedAt":"2020-12-22T17:10:55.076Z","trashed":false,"_rev":"Nxl-xHGv8"}