{"_id":"note:WYUtDYenW","title":"inquirer","content":"# inquirer\n> [inquirer - pypi.org](https://pypi.org/project/inquirer/)\n\n## Installation\n\n```bash\npip3 install inquirer \n```\n\n## Documentation\n\n> [Documentation](https://magmax.org/python-inquirer/)\n\n## Sample\n\n```python\nfrom __future__ import annotations\nimport inquirer\nfrom typing import List\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=1)\ndef lazy_load_algorithms():\n    import os\n    return [filename.rstrip(\".py\") for filename in os.listdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), \"algorithms\")) if filename != \"__init__.py\"]\n\n\nclass ImageDenoiseCli:\n\n    # Constants for typing\n    Path = str\n\n    # Registry algorithms\n    __register_algorithms__ = lazy_load_algorithms()\n\n    @classmethod\n    def run(cls):\n        algorithm = cls.ask_questions()[\"algorithm-choice\"]\n        print(algorithm)\n\n    @classmethod\n    def ask_questions(cls):\n        question = [inquirer.List(name='algorithm-choice',\n                                  message=\"Which algorithms to be used in denoising?\",\n                                  choices=lazy_load_algorithms())]\n\n        return inquirer.prompt(question)\n\n    @classmethod\n    def _check_image_path(cls, image_path=None, image_paths: List[ImageDenoiseCli.Path] = None):\n        if image_path:\n            assert isinstance(\n                image_path,\n                List[ImageDenoiseCli.Path]\n            ), \"Invalid image path\"\n        if image_paths:\n            assert isinstance(\n                image_paths,\n                List[ImageDenoiseCli.Path]\n            ), \"Invalid image paths\"\n\n\nif __name__ == \"__main__\":\n    ImageDenoiseCli.run()\n\n```","tags":[],"folderPathname":"/Python/第三方包/命令行","data":{},"createdAt":"2020-11-29T06:52:57.856Z","updatedAt":"2020-11-29T07:23:32.357Z","trashed":false,"_rev":"wfjEQTBaU"}