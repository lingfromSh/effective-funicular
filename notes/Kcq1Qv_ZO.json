{"_id":"note:Kcq1Qv_ZO","title":"图像二值化","content":"# 图像二值化\n\n## 用途\n\n图像二值化的作用是为了方便提取图像中的信息，二值图像在进行计算机识别时可以增加识别效率。\n\n## OpenCV代码\n\n```python\nimport os\n\nimport cv2 as cv\nimport matplotlib.pyplot as plt\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\n\ndef binary_color(image_path):\n    # Read image data\n    image = cv.imread(image_path)\n\n    # Binary\n    gray = cv.cvtColor(image, code=cv.COLOR_BGR2GRAY)\n    threshold, binary_image = cv.threshold(gray, 127, 255, cv.THRESH_BINARY)\n\n    # Show original image\n    image = cv.cvtColor(src=image, code=cv.COLOR_BGR2RGB)\n    plt.subplot(1, 3, 1)\n    plt.title(\"Original\")\n    plt.imshow(image)\n\n    # Show original image\n    gray = cv.cvtColor(src=gray, code=cv.COLOR_BGR2RGB)\n    plt.subplot(1, 3, 2)\n    plt.title(\"Gray\")\n    plt.imshow(gray)\n\n    # Show binary image\n    binary_image = cv.cvtColor(src=binary_image, code=cv.COLOR_BGR2RGB)\n    plt.subplot(1, 3, 3)\n    plt.title(\"Binary\")\n    plt.imshow(binary_image)\n\n    plt.show()\n\n\n```\n\n![效果](/home/ling/BoostNote/images/binary.png)\n\n\n## 均值迭代求取阈值的二值化\n\n1. 先图中灰度的中值作为初始阈值T0\n2. 利用阈值T0将图分割为两个部分（小于灰度值T0和大于灰度值T0），计算着两部分的灰度均值u1和u2\n3. 计算新的阈值 T1 = ( u1 + u2 ) / 2\n4. 若T0和T1差值大于误差，则T0=T1\n5. 重复2,3,4步骤，直至T0和T1的差值小于某个给定值\n6. 然后这个T0就是阈值了\n\n```python\nimport os\n\nimport cv2 as cv\nimport matplotlib.pyplot as plt\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\n\ndef get_threshold(image, delta=0.001):\n    sorted_image = sorted([pixel for row in image for pixel in row.tolist()])\n    thresh_0 = sorted_image[len(sorted_image) // 2]\n\n    def thresh(i, t):\n        colors1 = [pixel for pixel in i if pixel < t]\n        colors2 = [pixel for pixel in i if pixel >= t]\n        return colors1, colors2\n\n    while True:\n        u1, u2 = list(map(lambda x: sum(x) / len(x), thresh(sorted_image, thresh_0)))\n        thresh_1 = (u1 + u2) / 2\n        if abs(thresh_0 - thresh_1) > delta:\n            thresh_0 = thresh_1\n        else:\n            break\n    return thresh_0\n\n\ndef binary_color(image_path):\n    image = cv.imread(image_path)\n\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n\n    thresh = get_threshold(gray)\n    threshold, binary_image_1 = cv.threshold(gray, 127, 255, cv.THRESH_BINARY)\n    threshold, binary_image_2 = cv.threshold(gray, thresh, 255, cv.THRESH_BINARY)\n\n    # Show Original\n    image = cv.cvtColor(image, code=cv.COLOR_BGR2RGB)\n    plt.subplot(2, 2, 1)\n    plt.title(\"Original\")\n    plt.imshow(image)\n\n    # Show Gray\n    gray = cv.cvtColor(gray, code=cv.COLOR_BGR2RGB)\n    plt.subplot(2, 2, 2)\n    plt.title(\"Gray\")\n    plt.imshow(gray)\n\n    # Show Binary\n    binary = cv.cvtColor(binary_image_1, code=cv.COLOR_BGR2RGB)\n    plt.subplot(2, 2, 3)\n    plt.title(\"Simple Binary\")\n    plt.imshow(binary)\n\n    binary = cv.cvtColor(binary_image_2, code=cv.COLOR_BGR2RGB)\n    plt.subplot(2, 2, 4)\n    plt.title(\"Iteration Binary\")\n    plt.imshow(binary)\n\n    plt.show()\n\n```\n\n![效果](/home/ling/BoostNote/images/binary-2.png)\n","tags":[],"folderPathname":"/图像处理","data":{},"createdAt":"2020-12-06T14:14:29.774Z","updatedAt":"2020-12-06T15:38:58.340Z","trashed":false,"_rev":"OgtRbFAw1"}