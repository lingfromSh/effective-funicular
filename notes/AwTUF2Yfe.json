{"_id":"note:AwTUF2Yfe","title":"光流计算 Optical Flow","content":"# 光流计算 Optical Flow\n\n## 稀疏光流计算\n\nLucas Kanade\n\n```python\nimport numpy as np\nimport cv2 as cv\n\n\ndef lucas_kanade(video_path):\n    cap = cv.VideoCapture(video_path)\n    # params for ShiTomasi corner detection\n    feature_params = dict(maxCorners=100,\n                          qualityLevel=0.3,\n                          minDistance=7,\n                          blockSize=7)\n    # Parameters for lucas kanade optical flow\n    lk_params = dict(winSize=(15, 15),\n                     maxLevel=2,\n                     criteria=(cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03))\n    # Create some random colors\n    color = np.random.randint(0, 255, (100, 3))\n    # Take first frame and find corners in it\n    ret, old_frame = cap.read()\n    old_gray = cv.cvtColor(old_frame, cv.COLOR_BGR2GRAY)\n    p0 = cv.goodFeaturesToTrack(old_gray, mask=None, **feature_params)\n    # Create a mask image for drawing purposes\n    mask = np.zeros_like(old_frame)\n    while 1:\n        ret, frame = cap.read()\n        frame_gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)\n        # calculate optical flow\n        p1, st, err = cv.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)\n        # Select good points\n        good_new = p1[st == 1]\n        good_old = p0[st == 1]\n        # draw the tracks\n        for i, (new, old) in enumerate(zip(good_new, good_old)):\n            a, b = new.ravel()\n            c, d = old.ravel()\n            mask = cv.line(mask, (a, b), (c, d), color[i].tolist(), 2)\n            frame = cv.circle(frame, (a, b), 5, color[i].tolist(), -1)\n        img = cv.add(frame, mask)\n        cv.imshow('frame', img)\n        k = cv.waitKey(30) & 0xff\n        if k == 27:\n            break\n        # Now update the previous frame and previous points\n        old_gray = frame_gray.copy()\n        p0 = good_new.reshape(-1, 1, 2)\n```\n\n![Lucas-Kanade](/home/ling/BoostNote/images/lucas-kanade.png)\n![Lucas-Kanade](/home/ling/BoostNote/images/lucas-kanade-2.png)\n\n## 稠密光流计算\n\nGunner Farneback\n\n```python\nimport numpy as np\nimport cv2 as cv\n\n\ndef Gunner_Farneback(video_path):\n    cap = cv.VideoCapture(video_path)\n    ret, frame1 = cap.read()\n    prvs = cv.cvtColor(frame1, cv.COLOR_BGR2GRAY)\n    hsv = np.zeros_like(frame1)\n    hsv[..., 1] = 255\n    while True:\n        ret, frame2 = cap.read()\n        next = cv.cvtColor(frame2, cv.COLOR_BGR2GRAY)\n        flow = cv.calcOpticalFlowFarneback(prvs, next, None, 0.5, 3, 15, 3, 5, 1.2, 0)\n        mag, ang = cv.cartToPolar(flow[..., 0], flow[..., 1])\n        hsv[..., 0] = ang * 180 / np.pi / 2\n        hsv[..., 2] = cv.normalize(mag, None, 0, 255, cv.NORM_MINMAX)\n        bgr = cv.cvtColor(hsv, cv.COLOR_HSV2BGR)\n        cv.imshow('frame2', bgr)\n        k = cv.waitKey(30) & 0xff\n        if k == 27:\n            break\n        elif k == ord('s'):\n            cv.imwrite('opticalfb.png', frame2)\n            cv.imwrite('opticalhsv.png', bgr)\n        prvs = next\n\n```\n\n![Gunner-Farneback](/home/ling/BoostNote/images/Gunner-Farneback.png)\n","tags":[],"folderPathname":"/图像处理","data":{},"createdAt":"2020-12-07T05:08:52.288Z","updatedAt":"2020-12-07T09:51:29.987Z","trashed":false,"_rev":"GyfDkHAz5"}